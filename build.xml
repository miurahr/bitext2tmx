<?xml version="1.0" encoding="UTF-8"?>

<!--
/**************************************************************************
 *
 *  TMPotter - Bitext Aligner/TMX Editor (ant build script)
 *
 *  Copyright (C) 2015 Hiroshi Miura
 *
 *  This file is part of tmpotter.
 *
 *  Some portion are derived from OmegaT and bitext2tmx
 *
 *  Copyright (C) 2000-2007 Keith Godfrey and Maxym Mykhalchuk
 *                2008-2010 Didier Briel, Alex Buloichik
 *                2012 Didier Briel
 *                2013 Didier Briel, Aaron Madlon-Kay
 *                2014 Didier Briel
 *                2015 Aaron Madlon-Kay, Didier Briel
 *
 *  Copyright (C) 2006-2009 Raymond: Martin et al.
 *
 *  tmpotter is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  tmpotter is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with tmpotter.  If not, see http://www.gnu.org/licenses/.
 *
 **************************************************************************/
-->

<project name="tmpotter" default="default" basedir=".">
  <description>Builds, tests, and runs tmpotter</description>
  <taskdef resource="com/puppycrawl/tools/checkstyle/ant/checkstyle-ant-task.properties"
      classpath="test/lib/checkstyle-6.13-all.jar"/>
  <import file="nbproject/build-impl.xml"/>

  <target name="-pre-init">
    <fileset dir="lib" id="all-jars-fileset">
      <include name="**/*.jar"/>
    </fileset>
    <pathconvert pathsep=" " property="all-jars-path" refid="all-jars-fileset">
      <chainedmapper>
          <flattenmapper/>
          <globmapper from="*" to="lib/*"/>
      </chainedmapper>
    </pathconvert>

    <tstamp>
      <format property="build.date" pattern="yyMMdd" />
    </tstamp>

    <property file="src/tmpotter/Version.properties"/>
    <property name="devel"          value="false" />
    <property name="applicationjar" value="tmpotter.jar" />
  </target>

  <target name="manifest" description="Create manifest">
    <manifest file="MANIFEST.MF">
      <attribute name="Built-By"       value="${user.name}" />
      <attribute name="Version"        value="${version}" />
      <attribute name="Build"          value="${build.date}" />
      <attribute name="ApplicationJar" value="${applicationjar}" />
      <attribute name="Devel"          value="${devel}" />
      <attribute name="Main-Class"     value="tmpotter.Main" />
      <attribute name="Class-Path"     value="${all-jars-path}" />
      <attribute name="License" value="GNU General Public License version 3 or later"/>
    </manifest>
  </target>

  <target name="-post-init" depends="manifest" />

  <target name="-pre-jar" depends="compile" description="prepare to build jar">
    <mkdir dir="dist/lib"/>
    <copy todir="dist/lib">
      <fileset dir="lib" includes="**/*.jar"/>
    </copy>
  </target>

  <!-- Copies all files to dist -->
  <target name="release">
    <mkdir dir="dist"/>
    <copy todir="dist" file="LICENSE.txt"/>
    <!--
    <copy todir="dist">
        <fileset dir="release" includes="*" excludes="readme.txt"/>
        <fileset dir="release/linux-specific"/>
        <fileset dir="release/win32-specific" includes="tmpotter.bat"/>
    </copy>
    <copy todir="dist"
          file="release/readme.txt">
    </copy>
    -->
    <mkdir dir="dist/doc"/>
    <copy todir="dist/doc">
        <fileset dir="doc"/>
    </copy>
    <mkdir dir="dist/lib"/>
    <copy todir="dist/lib">
      <fileset dir="lib" includes="**/*.txt" excludes="**/*.7z" />
    </copy>
  </target>

  <!-- Set the repo.revision property from the first valid source in this order:
     1. src/tmpotter/Version.properties
     2. This git SHA1
  -->
  <target name="get-revision" depends="get-source-revision,get-git-revision">
    <!-- Fallback in case value was not set from source or git -->
    <property name="repo.revision" value="unknown"/>
    <echo message="Detected revision: ${repo.revision}"/>
  </target>

  <target name="get-source-revision">
    <condition property="repo.revision" value="${revision}">
      <and>
        <isset property="revision"/>
        <not>
          <equals arg1="${revision}" arg2="dev"/>
        </not>
      </and>
    </condition>
  </target>

  <available file=".git" type="dir" property="git.available"/>
  <target name="get-git-revision" if="git.available">
    <exec executable="git" outputproperty="git.sha1" failifexecutionfails="false">
      <arg value="rev-parse"/>
      <arg value="--short"/>
      <arg value="HEAD"/>
    </exec>
    <condition property="repo.revision" value="${git.sha1}">
      <and>
        <isset property="git.sha1"/>
        <length string="${git.sha1}" trim="yes" length="0" when="greater"/>
      </and>
    </condition>
  </target>

  <!-- Builds a source distribution -->
  <target name="src" depends="init,get-revision" description="Build source distribution">
    <mkdir dir="dist2"/>
    <!-- Create temporary Version.properties with current revision -->
    <tempfile property="temp.version.props" destdir="dist2" deleteonexit="true"/>
    <copy file="src/tmpotter/Version.properties" tofile="${temp.version.props}"/>
    <propertyfile file="${temp.version.props}">
      <entry key="revision" value="${repo.revision}"/>
    </propertyfile>
    <!-- Build zip -->
    <zip destfile="dist2/tmpotter_${version}_${revision}_Source.zip">
      <fileset dir="."
          includes="doc/** lib/** nbproject/** release/** src/** test/** build.xml"
          excludes="**/nbproject/private/** **/build/** **/dist/** src/tmpotter/Version.properties" />
      <zipfileset file="${temp.version.props}" fullpath="src/tmpotter/Version.properties"/>
    </zip>
  </target>

  <target name="-post-compile-test" depends="checkstyle"/>

  <target name="checkstyle"
        description="Generates a report of code convention violations.">
    <checkstyle config="doc/codingstyle_checks.xml">
      <fileset dir="src">
        <patternset>
          <include name="**/*.java"/>
          <exclude name="**/util/xml/*.java"/>
          <exclude name="**/util/Base64.java"/>
          <exclude name="**/*Test*"/>
          <exclude name="**/segmentation/*.java"/>
          <exclude name="**/segmentation/**/*.java"/>
          <exclude name="**/gen/**"/>
        </patternset>
      </fileset>
      <formatter type="plain"/>
      <formatter type="xml" toFile="build/checkstyle_errors.xml"/>
    </checkstyle>
  </target>

  <target name="-post-clean">
    <delete file="MANIFEST.MF" />
    <delete dir="dist2" />
  </target>
</project>
