<?xml version="1.0" encoding="UTF-8"?>

<!--
#######################################################################
#
#  bitext2tmx - Bitext Aligner/Editor to TMX (ant build script)
#
#  Copyright (C) 2006-2009 Raymond: Martin et al.
#                2015 Hiroshi Miura
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
#######################################################################
# Some portion are derived from OmegaT build scripts
#
# Copyright (C) 2000-2007 Keith Godfrey and Maxym Mykhalchuk
#               2008-2010 Didier Briel, Alex Buloichik
#               2012 Didier Briel
#               2013 Didier Briel, Aaron Madlon-Kay
#               2014 Didier Briel
#               2015 Aaron Madlon-Kay, Didier Briel
#######################################################################
-->

<project name="bitext2tmx" default="default" basedir=".">
  <description>Builds, tests, and runs bitext2tmx</description>
  <taskdef resource="com/puppycrawl/tools/checkstyle/ant/checkstyle-ant-task.properties"
      classpath="test/lib/checkstyle-6.13-all.jar"/>
  <import file="nbproject/build-impl.xml"/>

  <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-jar:                  called before JAR building
      -post-jar:                 called after JAR building
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Another way to customize the build is by overriding existing main targets.
    The targets of interest are: 

      -init-macrodef-javac:     defines macro for javac compilation
      -init-macrodef-junit:     defines macro for junit execution
      -init-macrodef-debug:     defines macro for class debugging
      -init-macrodef-java:      defines macro for class execution
      -do-jar:                  JAR building
      run:                      execution of project 
      -javadoc-build:           Javadoc generation
      test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

        <target name="run" depends="JavaApplication1-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that the overridden target depends on the jar target and not only on 
    the compile target as the regular run target does. Again, for a list of available 
    properties which you can use, check the target you are overriding in the
    nbproject/build-impl.xml file. 

    -->

  <target name="-pre-init">
    <fileset dir="lib" id="all-jars-fileset">
      <include name="**/*.jar"/>
    </fileset>
    <pathconvert pathsep=" " property="all-jars-path" refid="all-jars-fileset">
      <chainedmapper>
          <flattenmapper/>
          <globmapper from="*" to="lib/*"/>
      </chainedmapper>
    </pathconvert>

    <tstamp>
      <format property="build.date" pattern="yyMMdd" />
    </tstamp>

    <property file="src/bitext2tmx/Version.properties"/>
    <property name="devel"          value="false" />
    <property name="applicationjar" value="bitext2tmx.jar" />
  </target>

  <target name="manifest" description="Create manifest">
    <manifest file="MANIFEST.MF">
      <attribute name="Built-By"       value="${user.name}" />
      <attribute name="Version"        value="${version}" />
      <attribute name="Build"          value="${build.date}" />
      <attribute name="ApplicationJar" value="${applicationjar}" />
      <attribute name="Devel"          value="${devel}" />
      <attribute name="Main-Class"     value="bitext2tmx.Bitext2tmx" />
      <attribute name="Class-Path"     value="${all-jars-path}" />
      <attribute name="License" value="GNU General Public License version 3 or later"/>
    </manifest>
  </target>

  <target name="-post-init" depends="manifest" />

  <target name="-pre-jar" depends="compile" description="prepare to build jar">
    <mkdir dir="dist/lib"/>
    <copy todir="dist/lib">
      <fileset dir="lib" includes="**/*.jar"/>
    </copy>
  </target>

  <!-- Copies all files to dist -->
  <target name="release">
    <mkdir dir="dist"/>
    <copy todir="dist">
        <fileset dir="release" includes="*" excludes="readme.txt"/>
    </copy>
    <!--
    <copy todir="dist">
        <fileset dir="release/linux-specific"/>
        <fileset dir="release/win32-specific" includes="bitext2tmx.bat"/>
    </copy>
    <copy todir="dist"
          file="release/readme.txt">
    </copy>
    -->
    <mkdir dir="dist/doc"/>
    <copy todir="dist/doc">
        <fileset dir="doc"/>
    </copy>
    <mkdir dir="dist/lib"/>
    <copy todir="dist/lib">
      <fileset dir="lib" includes="**/*.txt" excludes="**/*.7z" />
    </copy>
  </target>

  <!-- Set the repo.revision property from the first valid source in this order:
     1. src/bitext2tmx/Version.properties
     2. This git SHA1
  -->
  <target name="get-revision" depends="get-source-revision,get-git-revision">
    <!-- Fallback in case value was not set from source or git -->
    <property name="repo.revision" value="unknown"/>
    <echo message="Detected revision: ${repo.revision}"/>
  </target>

  <target name="get-source-revision">
    <condition property="repo.revision" value="${revision}">
      <and>
        <isset property="revision"/>
        <not>
          <equals arg1="${revision}" arg2="dev"/>
        </not>
      </and>
    </condition>
  </target>

  <available file=".git" type="dir" property="git.available"/>
  <target name="get-git-revision" if="git.available">
    <exec executable="git" outputproperty="git.sha1" failifexecutionfails="false">
      <arg value="rev-parse"/>
      <arg value="--short"/>
      <arg value="HEAD"/>
    </exec>
    <condition property="repo.revision" value="${git.sha1}">
      <and>
        <isset property="git.sha1"/>
        <length string="${git.sha1}" trim="yes" length="0" when="greater"/>
      </and>
    </condition>
  </target>

  <!-- Builds a source distribution -->
  <target name="src" depends="init,get-revision" description="Build source distribution">
    <mkdir dir="dist2"/>
    <!-- Create temporary Version.properties with current revision -->
    <tempfile property="temp.version.props" destdir="dist2" deleteonexit="true"/>
    <copy file="src/bitext2tmx/Version.properties" tofile="${temp.version.props}"/>
    <propertyfile file="${temp.version.props}">
      <entry key="revision" value="${repo.revision}"/>
    </propertyfile>
    <!-- Build zip -->
    <zip destfile="dist2/bitext2tmx_${version}_${revision}_Source.zip">
      <fileset dir="."
          includes="doc/** lib/** nbproject/** release/** src/** test/** build.xml"
          excludes="**/nbproject/private/** **/build/** **/dist/** src/bitext2tmx/Version.properties" />
      <zipfileset file="${temp.version.props}" fullpath="src/bitext2tmx/Version.properties"/>
    </zip>
  </target>

  <target name="-post-compile-test" depends="checkstyle"/>

  <target name="checkstyle"
        description="Generates a report of code convention violations.">
    <checkstyle config="doc/codingstyle_checks.xml">
      <fileset dir="src">
        <patternset>
          <include name="**/*.java"/>
          <exclude name="**/util/xml/*.java"/>
          <exclude name="**/util/Base64.java"/>
          <exclude name="**/*Test*"/>
        </patternset>
      </fileset>
      <formatter type="plain"/>
      <formatter type="xml" toFile="build/checkstyle_errors.xml"/>
    </checkstyle>
  </target>

  <target name="-post-clean">
    <delete file="MANIFEST.MF" />
    <delete dir="dist2" />
  </target>
</project>
