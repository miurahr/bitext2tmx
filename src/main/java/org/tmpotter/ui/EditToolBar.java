/* *************************************************************************
 *
 *  TMPotter - Bi-text Aligner/TMX Editor
 *
 *  Copyright (C) 2016 Hiroshi Miura
 *
 *  This file is part of TMPotter.
 *
 *  TMPotter is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  TMPotter is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with TMPotter.  If not, see http://www.gnu.org/licenses/.
 *
 * *************************************************************************/

package org.tmpotter.ui;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import javax.swing.JButton;
import javax.swing.text.DefaultEditorKit;


/**
 * Edit Toolbar.
 *
 * @author Hiroshi Miura
 */
public class EditToolBar extends javax.swing.JPanel implements ActionListener {

    private static final Logger LOGGER = LoggerFactory.getLogger(EditToolBar.class);
    private ActionHandler actionHandler;

    /**
     * Creates new form EditToolBar.
     *
     * @author Hiroshi Miura
     */
    public EditToolBar(ActionHandler handler) {
        initComponents();
        this.actionHandler = handler;
        setActionCommands();
    }

    public final void setUndoEnabled(boolean enabled) {
        buttonUndo.setEnabled(enabled);
    }


    /**
     * Set 'actionCommand' for all menu items.
     */
    protected void setActionCommands() {
        try {
            for (Field f : this.getClass().getDeclaredFields()) {
                if (JButton.class.isAssignableFrom(f.getType())) {
                    JButton button = (JButton) f.get(this);
                    button.setActionCommand(f.getName());
                    button.addActionListener(this);
                }
            }
        } catch (IllegalAccessException ex) {
            throw new ExceptionInInitializerError(ex);
        }
    }

    public void actionPerformed(ActionEvent evt) {
        // Get item name from actionCommand.
        String action = evt.getActionCommand();

        // Find method by item name.
        String methodName = action + "ActionPerformed";
        Method method = null;
        try {
            method = actionHandler.getClass().getMethod(methodName);
        } catch (NoSuchMethodException ignore) {
            try {
                method = actionHandler.getClass()
                    .getMethod(methodName, Integer.TYPE);
            } catch (NoSuchMethodException ex) {
                throw new IncompatibleClassChangeError(
                    "Error invoke method handler for main menu: there is no method "
                        + methodName);
            }
        }
        // Call ...MenuItemActionPerformed method.
        Object[] args = method.getParameterTypes().length == 0 ? null : new Object[]{evt.getModifiers()};
        try {
            method.invoke(actionHandler, args);
        } catch (IllegalAccessException ex) {
            throw new IncompatibleClassChangeError(
                "Error invoke method handler for main menu");
        } catch (InvocationTargetException ex) {
            LOGGER.info("Error execute method", ex);
            throw new IncompatibleClassChangeError(
                "Error invoke method handler for main menu");
        }
    }

    final void setFonts(final Font font) {
        buttonSave.setFont(font);
        buttonSaveAs.setFont(font);
        buttonClose.setFont(font);
        buttonUndo.setFont(font);
        buttonRedo.setFont(font);
        buttonCut.setFont(font);
        buttonCopy.setFont(font);
        buttonPaste.setFont(font);
    }

    final void enableButtons(boolean enabled) {
        buttonSave.setEnabled(enabled);
        buttonSaveAs.setEnabled(enabled);
        buttonClose.setEnabled(enabled);
        buttonUndo.setEnabled(enabled);
        buttonRedo.setEnabled(enabled);
        buttonCut.setEnabled(enabled);
        buttonCopy.setEnabled(enabled);
        buttonPaste.setEnabled(enabled);
    }


    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        editToolBar = new javax.swing.JToolBar();
        buttonNew = new javax.swing.JButton();
        buttonOpen = new javax.swing.JButton();
        buttonSave = new javax.swing.JButton();
        buttonSaveAs = new javax.swing.JButton();
        buttonClose = new javax.swing.JButton();
        buttonExit = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        buttonUndo = new javax.swing.JButton();
        buttonRedo = new javax.swing.JButton();
        buttonCut = new javax.swing.JButton(new DefaultEditorKit.CutAction());
        buttonCopy = new javax.swing.JButton(new DefaultEditorKit.CopyAction());
        buttonPaste = new javax.swing.JButton(new DefaultEditorKit.PasteAction());

        setMinimumSize(new java.awt.Dimension(300, 52));
        setPreferredSize(new java.awt.Dimension(300, 52));

        editToolBar.setFloatable(false);
        editToolBar.setRollover(true);
        editToolBar.setMinimumSize(new java.awt.Dimension(100, 64));
        editToolBar.setPreferredSize(new java.awt.Dimension(100, 64));

        buttonNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/tmpotter/ui/resources/filenew.png"))); // NOI18N
        buttonNew.setText("New");
        buttonNew.setFocusable(false);
        buttonNew.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonNew.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editToolBar.add(buttonNew);

        buttonOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/tmpotter/ui/resources/fileopen.png"))); // NOI18N
        buttonOpen.setText("Open");
        buttonOpen.setFocusable(false);
        buttonOpen.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonOpen.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editToolBar.add(buttonOpen);

        buttonSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/tmpotter/ui/resources/filesave.png"))); // NOI18N
        buttonSave.setText("Save");
        buttonSave.setFocusable(false);
        buttonSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonSave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editToolBar.add(buttonSave);

        buttonSaveAs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/tmpotter/ui/resources/filesave.png"))); // NOI18N
        buttonSaveAs.setText("Save as");
        buttonSaveAs.setFocusable(false);
        buttonSaveAs.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonSaveAs.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editToolBar.add(buttonSaveAs);

        buttonClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/tmpotter/ui/resources/fileclose.png"))); // NOI18N
        buttonClose.setText("Close");
        buttonClose.setFocusable(false);
        buttonClose.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonClose.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editToolBar.add(buttonClose);

        buttonExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/tmpotter/ui/resources/application-exit.png"))); // NOI18N
        buttonExit.setText("Exit");
        buttonExit.setFocusable(false);
        buttonExit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonExit.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editToolBar.add(buttonExit);
        editToolBar.add(jSeparator1);

        buttonUndo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/tmpotter/ui/resources/undo.png"))); // NOI18N
        buttonUndo.setText("Undo");
        buttonUndo.setFocusable(false);
        buttonUndo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonUndo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editToolBar.add(buttonUndo);

        buttonRedo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/tmpotter/ui/resources/redo.png"))); // NOI18N
        buttonRedo.setText("Redo");
        buttonRedo.setFocusable(false);
        buttonRedo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonRedo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editToolBar.add(buttonRedo);

        buttonCut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/tmpotter/ui/resources/cut.png"))); // NOI18N
        buttonCut.setText("Cut");
        buttonCut.setFocusable(false);
        buttonCut.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonCut.setMinimumSize(new java.awt.Dimension(45, 45));
        buttonCut.setPreferredSize(new java.awt.Dimension(45, 45));
        buttonCut.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editToolBar.add(buttonCut);

        buttonCopy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/tmpotter/ui/resources/editcopy.png"))); // NOI18N
        buttonCopy.setText("Copy");
        buttonCopy.setFocusable(false);
        buttonCopy.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonCopy.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editToolBar.add(buttonCopy);

        buttonPaste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/tmpotter/ui/resources/editpaste.png"))); // NOI18N
        buttonPaste.setText("Paste");
        buttonPaste.setFocusable(false);
        buttonPaste.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonPaste.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editToolBar.add(buttonPaste);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(editToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 525, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(editToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonClose;
    private javax.swing.JButton buttonCopy;
    private javax.swing.JButton buttonCut;
    private javax.swing.JButton buttonExit;
    private javax.swing.JButton buttonNew;
    private javax.swing.JButton buttonOpen;
    private javax.swing.JButton buttonPaste;
    private javax.swing.JButton buttonRedo;
    private javax.swing.JButton buttonSave;
    private javax.swing.JButton buttonSaveAs;
    private javax.swing.JButton buttonUndo;
    private javax.swing.JToolBar editToolBar;
    private javax.swing.JToolBar.Separator jSeparator1;
    // End of variables declaration//GEN-END:variables
}
